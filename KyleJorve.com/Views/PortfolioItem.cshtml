@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<ContentModels.PortfolioItem>
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
    Layout = "Master.cshtml";
    ViewData["BodyClass"] = "portfolioItemPg";

    var fromQuery = Request.QueryString["from"].ToString().ToLower();
    bool hasFrom = fromQuery != null && fromQuery != "" && fromQuery.Length > 0;
    bool fromRecent = fromQuery.Contains("recent");
    bool fromHome = fromQuery.Contains("home");

    var nextQuery = Request.QueryString["next"];
    bool hasNext = nextQuery != null && nextQuery != "" && nextQuery.Length > 0;

    var homePgID = 1081;
    int homePgLimit = Umbraco.Content(homePgID).portfolioLimit;
    int recentWorkLimit = Umbraco.Content(homePgID).portfolioLimit;

    var portfolioPgID = 1082;
    var portfolioItems = Umbraco.TypedContent(portfolioPgID).Children;

    var theseItems = fromHome ? portfolioItems.Where(i => i.GetPropertyValue<bool>("featuredWork")).OrderByDescending(i => i.CreateDate).ToList() : fromRecent ? portfolioItems.OrderByDescending(i => i.CreateDate).ToList() : portfolioItems.ToList();

    var imgs = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("portfolioItemImages").ToList();

    var nextItem = Umbraco.Content(nextQuery.AsInt());
    string nextUrl1 = nextItem.Url + (hasFrom ? "?from=" + fromQuery : "");
    string nextUrl2 = string.Empty;

    // define next next item
    if (fromHome)
    {
        for (int i = 0; i < homePgLimit; i++)
        {
            if (theseItems[i].Id == CurrentPage.Id)
            {
                if (i + 3 <= homePgLimit && theseItems[i + 2] != null)
                {
                    nextUrl2 = (hasFrom ? "&" : "?") + "next=" + theseItems[i + 2].Id.ToString();
                }

                break;
            }
        }
    }
    else if (fromRecent)
    {
        for (int i = 0; i < recentWorkLimit; i++)
        {
            if (theseItems[i].Id == CurrentPage.Id)
            {
                if (i + 3 <= recentWorkLimit && theseItems[i + 2] != null)
                {
                    nextUrl2 = (hasFrom ? "&" : "?") + "next=" + theseItems[i + 2].Id.ToString();
                }

                break;
            }
        }
    }
    else
    {
        var catsDropdown = ApplicationContext.Services.DataTypeService.GetDataTypeDefinitionByName("Portfolio Type Dropdown List");
        var cats = ApplicationContext.Services.DataTypeService.GetPreValuesCollectionByDataTypeId(catsDropdown.Id).PreValuesAsDictionary.Select(x => x.Value).ToList();
        var thisCat = Model.Content.GetPropertyValue<string>("portfolioItemType");
        var thisGroup = theseItems.Where(i => i.GetPropertyValue<string>("portfolioItemType") == thisCat).OrderBy(i => i.GetPropertyValue<int>("sortNumber")).ToList();
        var otherGroup = theseItems.Where(item => item.GetPropertyValue<string>("portfolioItemType") != thisCat).OrderBy(item => item.GetPropertyValue<int>("sortNumber")).ToList();

        for (int i = 0; i < thisGroup.Count(); i++)
        {
            if (thisGroup[i].Id == CurrentPage.Id)
            {
                if (i + 3 <= thisGroup.Count() && thisGroup[i + 2] != null)
                {
                    nextUrl2 = (hasFrom ? "&" : "?") + "next=" + thisGroup[i + 2].Id.ToString();
                }
                else if (thisCat != cats.Last().Value && i + 3 == thisGroup.Count() + 1 && otherGroup != null && otherGroup.Count() > 0)
                {
                    nextUrl2 = (hasFrom ? "&" : "?") + "next=" + otherGroup[0].Id.ToString();
                }
                else if (thisCat != cats.Last().Value && i + 3 > thisGroup.Count() + 1 && otherGroup != null && otherGroup.Count() > 1)
                {
                    nextUrl2 = (hasFrom ? "&" : "?") + "next=" + otherGroup[1].Id.ToString();
                }

                break;
            }
        }
    }
}

<div class="itemShowcase">
    <section class="imgSection darkContentBg">
        @if (imgs != null)
        {
            <div class="imgSlider @(imgs.Count() > 1 ? "imgSlideshow" : null)" id="@(imgs.Count() > 1 ? "imgSlideshow" : null)">
                @for (int i = 0; i < imgs.Count(); i++)
                {
                    <div class="imgSlide">
                        <img id="@("img-" + i)" src="@imgs[i].Url" alt="@(Umbraco.Field("portfolioItemTitle") + " Image " + i)" />
                        <div class="iconCol">
                            <div class="full-screen openLightbox">
                                <i class="fas fa-expand"></i>
                            </div>
                        </div>
                    </div>
                }
            </div>
            if (imgs.Count() > 1)
            {
                <div class="sliderNav" id="sliderNav">
                    <!--slideshow arrows go here-->
                </div>
                <div class="sliderDots" id="sliderDots">
                    <!--slideshow dots go here-->
                </div>
            }

            foreach (var img in imgs)
            {
                <div class="imgBg" style="background:url('@img.Url') no-repeat center center / cover"></div>
            }
        }
    </section>

    <section class="descSection lightContentBg">
        <div class="content-wrapper">
            <h1 class="portfolioItem__title">@Umbraco.Field("portfolioItemTitle")</h1>
            @Umbraco.Field("portfolioItemDesc")
            <div class="buttonWrp align-left">
                @if (!string.IsNullOrWhiteSpace(Umbraco.Field("portfolioItemPurchaseLink").ToString()))
                {
                    <a href="@(Umbraco.Field("portfolioItemPurchaseLink"))" class="button prime" target="_blank" rel="noreferrer noopener"><span>Purchase</span></a>
                }

                @if (hasNext)
                {
                    <a class="button secondary" href="@Html.Raw(nextUrl1 + nextUrl2)">
                        Next Item&nbsp;<i class="fas fa-arrow-right"></i>
                    </a>
                }
            </div>

        </div>
    </section>
</div>