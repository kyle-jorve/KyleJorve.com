@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    var homePgID = 1081;
    var portfolioPgID = 1082;
    var portfolioItems = Umbraco.TypedContent(portfolioPgID).Children;
    int homePgLimit = Umbraco.Content(homePgID).portfolioLimit;
}

@if (CurrentPage.Id == homePgID)
{
    var portfolioOrdered = portfolioItems.Where(i => i.GetPropertyValue<bool>("featuredWork")).OrderByDescending(i => i.CreateDate).ToList();

    <div class="portfolioGrid" id="@Umbraco.Content(homePgID).portfolioHeading.ToString().ToLower().Replace(" ", "-")">
        @for (int i = 0; i < homePgLimit; i++)
        {
            var itemType = portfolioOrdered[i].GetPropertyValue<string>("portfolioItemType").ToLower().Replace(' ', '-');
            var imgCollection = portfolioOrdered[i].GetPropertyValue<IEnumerable<IPublishedContent>>("portfolioItemImages");
            var yPos = portfolioOrdered[i].GetPropertyValue<string>("imgVertPos");
            var next = i + 1 < homePgLimit ? "&next=" + portfolioOrdered[i + 1].Id : "";
            var url = portfolioOrdered[i].Url + "?from=home" + next;

            if (imgCollection != null)
            {
                var img = Umbraco.Media(imgCollection.ToArray()[0].Id);
                decimal imgWidth = img.GetPropertyValue<decimal>("umbracoWidth");
                decimal imgHeight = img.GetPropertyValue<decimal>("umbracoHeight");
                var aspect = imgWidth / imgHeight;
                string itemClass = string.Empty;

                //define itemClass
                if (aspect > 1.333M)
                {
                    itemClass = "wide";
                }
                else if (aspect < 0.875M)
                {
                    itemClass = "tall";
                }

                <div class="portfolioItem @itemType @itemClass animatedEl" style="background-image:url('@(img.Url)'); background-position:center @yPos;">
                    <div class="itemContents">
                        <div class="iconRow">
                            <a href="@url" class="description">
                                <i class="fas fa-align-left"></i>
                            </a>
                            <div class="full-screen openLightbox" data-src="@img.Url" data-url="@url">
                                <i class="fas fa-expand"></i>
                            </div>
                        </div>
                        <a class="portfolioLink" href="@url"></a>
                    </div>
                </div>
            }
        }
    </div>
}
else
{
    var catsDropdown = ApplicationContext.Services.DataTypeService.GetDataTypeDefinitionByName("Portfolio Type Dropdown List");
    var cats = ApplicationContext.Services.DataTypeService.GetPreValuesCollectionByDataTypeId(catsDropdown.Id).PreValuesAsDictionary.Select(x => x.Value).ToList();
    var portfolioOrdered = portfolioItems.OrderBy(i => i.GetPropertyValue("sortNumber")).ToList();

    for (int ix = 0; ix < cats.Count(); ix++)
    {
        var catID = cats[ix].Value.ToLower().Replace(' ', '-');
        bool lastCat = cats[ix] == cats.Last();
        var nextCat = lastCat ? cats[ix - 1].Value : cats[ix + 1].Value;
        var nextID = nextCat.ToLower().Replace(' ', '-');

        <div class="portfolioCatWrp" id="@catID">
            <div class="portfolio__titleRow">
                <h2 class="portfolio__titleCol portfolio__rowTitle">@cats[ix].Value</h2>
                <div class="portfolio__titleCol portfolio__rowLink">
                    <a class="button underline noMargin" href="#@nextID">
                        @if (!lastCat)
                        {
                            <i class="fas fa-arrow-down"></i>
                        }
                        else
                        {
                            <i class="fas fa-arrow-up"></i>
                        }
                        &nbsp;Jump to @nextCat
                    </a>
                </div>
            </div>

            <div class="portfolioGrid">
                @for (var i = 0; i < portfolioOrdered.Count(); i++)
                {
                    if (portfolioOrdered[i].GetPropertyValue<string>("portfolioItemType") == cats[ix].Value)
                    {
                        var itemType = portfolioOrdered[i].GetPropertyValue<string>("portfolioItemType").ToLower().Replace(' ', '-');
                        var imgCollection = portfolioOrdered[i].GetPropertyValue<IEnumerable<IPublishedContent>>("portfolioItemImages");
                        var yPos = portfolioOrdered[i].GetPropertyValue<string>("imgVertPos");
                        var next = i + 2 < portfolioOrdered.Count() ? "&next=" + portfolioOrdered[i + 1].Id : "";
                        var url = portfolioOrdered[i].Url + "?from=portfolio" + next;

                        if (imgCollection != null)
                        {
                            var img = Umbraco.Media(imgCollection.ToArray()[0].Id);
                            decimal imgWidth = img.GetPropertyValue<decimal>("umbracoWidth");
                            decimal imgHeight = img.GetPropertyValue<decimal>("umbracoHeight");
                            var aspect = imgWidth / imgHeight;
                            string itemClass = string.Empty;

                            //define itemClass
                            if (aspect > 1.333M)
                            {
                                itemClass = "wide";
                            }
                            else if (aspect < 0.875M)
                            {
                                itemClass = "tall";
                            }

                            <div class="portfolioItem @itemType @itemClass" style="background-image:url('@(img.Url)'); background-position:center @yPos;">
                                <div class="itemContents">
                                    <div class="iconRow">
                                        <a href="@url" class="icon description">
                                            <i class="fas fa-align-left"></i>
                                        </a>
                                        <div class="icon full-screen openLightbox" data-src="@img.Url" data-url="@url">
                                            <i class="fas fa-expand"></i>
                                        </div>
                                    </div>
                                    <a class="portfolioLink" href="@url"></a>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            @if (cats[ix] != cats.Last())
            {
                <div class="logoIcon">
                    @Html.Raw(System.IO.File.ReadAllText(Server.MapPath("/images/logo-circle-icon.svg")))
                </div>
            }
        </div>
    }
}